-- Tasks 3: Aggregate functions, Having, Order By, GroupBy and Joins: --


-- 1. Write a SQL query to List Events and Their Average Ticket Prices. --
select event_name, format (AVG(ticket_price) ,2) as average_ticket_price from event GROUP BY event_name;

-- 2. Write a SQL query to Calculate the Total Revenue Generated by Events. --
select event_id, SUM(total_cost) as total_revenue from Booking GROUP BY event_id;

-- 3. Write a SQL query to find the event with the highest ticket sales. --
select event_id, SUM(num_tickets) as total_tickets from Booking GROUP BY event_id
ORDER BY total_tickets desc limit 1;

-- 4. Write a SQL query to Calculate the Total Number of Tickets Sold for Each Event. --
select event_id, SUM(num_tickets) as total_tickets_sold from Booking GROUP BY event_id;

-- 5. Write a SQL query to Find Events with No Ticket Sales. --
select e.event_id, e.event_name from event e
LEFT JOIN Booking b on e.event_id = b.event_id
where b.booking_id=0 or null;

-- 6. Write a SQL query to Find the User Who Has Booked the Most Tickets. --
select c.customer_name, SUM(b.num_tickets) as total_tickets from Customer c
JOIN Booking b on c.customer_id = b.customer_id
GROUP BY c.customer_id
ORDER BY total_tickets desc limit 1;

-- 7. Write a SQL query to List Events and the total number of tickets sold for each month. --
select month(booking_date) as Month, e.event_name, SUM(b.num_tickets) as tickets_sold from Booking b
JOIN event e ON b.event_id = e.event_id
GROUP BY month(booking_date), e.event_name ORDER BY Month;

-- 8. Write a SQL query to calculate the average Ticket Price for Events in Each Venue. --
select v.venue_name, AVG(e.ticket_price) as avg_price from event e
JOIN Venu v on e.venue_id = v.venue_id
GROUP BY v.venue_name;

-- 9. Write a SQL query to calculate the total Number of Tickets Sold for Each Event Type. --
select event_type, SUM(b.num_tickets) as tickets_sold from event e
JOIN Booking b on e.event_id = b.event_id
GROUP BY event_type;

-- 10. Write a SQL query to calculate the total Revenue Generated by Events in Each Year. --
select YEAR(booking_date) as Year, SUM(total_cost) as total_revenue from Booking
GROUP BY YEAR(booking_date);

-- 11. Write a SQL query to list users who have booked tickets for multiple events. --
select customer_id, COUNT(DISTINCT event_id) as event_count from Booking
GROUP BY customer_id
HAVING COUNT(DISTINCT event_id) > 1;

-- 12. Write a SQL query to calculate the Total Revenue Generated by Events for Each User. --
select c.customer_name, SUM(b.total_cost) as total_spent from Customer c
JOIN Booking b on c.customer_id = b.customer_id
GROUP BY c.customer_id;

-- 13. Write a SQL query to calculate the Average Ticket Price for Events in Each Category and Venue. --
select e.event_type, v.venue_name, AVG(e.ticket_price) as avg_price from event e
JOIN Venu v on e.venue_id = v.venue_id
GROUP BY e.event_type, v.venue_name;

-- 14. Write a SQL query to list Users and the Total Number of Tickets They've Purchased in the Last 30 Days. --
select c.customer_name, SUM(b.num_tickets) as total_tickets from Customer c
JOIN Booking b on c.customer_id = b.customer_id
where booking_date >= CURDATE() - INTERVAL 30 DAY
GROUP BY c.customer_id;
