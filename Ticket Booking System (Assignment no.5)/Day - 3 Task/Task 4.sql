--  Tasks 4: Subquery and its types --

-- 1. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery. --
select venue_id,(select AVG(ticket_price) from event e2
where e2.venue_id = e1.venue_id) as avg_ticket_price from event e1
GROUP BY venue_id;

-- 2. Find Events with More Than 50% of Tickets Sold using subquery. --
select event_id, event_name from event where event_id IN (
    select event_id from Booking
    GROUP BY event_id
    HAVING SUM(num_tickets) > (select total_seats * 0.5 from event e2 WHERE e2.event_id = Booking.event_id) );
    
-- 3. Calculate the Total Number of Tickets Sold for Each Event. --
select event_id,
       (select SUM(num_tickets) from Booking b
        WHERE b.event_id = e.event_id) as total_tickets from event e;
        
-- 4. Find Users Who Have Not Booked Any Tickets Using a NOT EXISTS Subquery. --
select * from Customer c WHERE NOT EXISTS ( select 1 from Booking b
    WHERE b.customer_id = c.customer_id );
    
-- 5. List Events with No Ticket Sales Using a NOT IN Subquery. --
select * from event WHERE event_id NOT IN (
    SELECT DISTINCT event_id
    from Booking );
    
-- 6. Calculate the Total Number of Tickets Sold for Each Event Type Using a Subquery in the FROM Clause. --
select event_type, SUM(tickets_sold) as total_tickets from (
    select e.event_type, b.num_tickets as tickets_sold from event e
    JOIN Booking b on e.event_id = b.event_id) as sub
GROUP BY event_type;

-- 7. Find Events with Ticket Prices Higher Than the Average Ticket Price Using a Subquery in the WHERE Clause. --
select * from event WHERE ticket_price > (
    select AVG(ticket_price) from event );
    
-- 8. Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery. --
select customer_name,
       (select SUM(total_cost) from Booking b
        WHERE b.customer_id = c.customer_id) as total_revenue from Customer c;
        
-- 9. List Users Who Have Booked Tickets for Events in a Given Venue Using a Subquery in the WHERE Clause. --
select * from Customer WHERE customer_id IN (
    select DISTINCT b.customer_id from Booking b
    JOIN event e ON b.event_id = e.event_id
    WHERE e.venue_id = 3 );
    
-- 10. Calculate the Total Number of Tickets Sold for Each Event Category Using a Subquery with GROUP BY. --
select event_type, SUM(num_tickets) as total_tickets from 
    (select e.event_type, b.num_tickets from Booking b
    JOIN event e ON b.event_id = e.event_id) as sub
GROUP BY event_type;

-- 11. Find Users Who Have Booked Tickets for Events in each Month Using a Subquery with DATE_FORMAT. --
select customer_name from Customer 
WHERE customer_id IN (
    select DISTINCT customer_id from Booking
    WHERE DATE_FORMAT(booking_date, '%Y-%m') = '2024-05');
    
-- 12. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery --
select v.venue_name,
       (select AVG(e2.ticket_price) from event e2
        WHERE e2.venue_id = v.venue_id) as avg_price from Venu v;
